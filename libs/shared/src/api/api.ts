/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * DDKR API
 * TBD
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';
import axios from 'axios';
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';
import type {
  AcademyModule,
  AcademyModulesFilterRequestDTO,
  AcademyModulesResultDTO,
  CreateHollandQuestionDto,
  FilterRequestDTO,
  HollandQuestion,
  HollandTest,
  HollandTestFinishDto,
  HollandTestScoreResponseDto,
  HollandTestStartResponseDto,
  KpiAcademyFinishDto,
  KpiCompassFinishDto,
  Mark,
  MutationDeleteHollandTestParams,
  QueryGetHollandTestScoreParams,
  School,
  Subject,
  TestListDto,
  UpdateStudentInformationDto,
} from './model';

export const QueryGet = (options?: AxiosRequestConfig): Promise<AxiosResponse<void>> => {
  return axios.get(`/`, options);
};

export const getQueryGetQueryKey = () => {
  return [`/`] as const;
};

export const getQueryGetQueryOptions = <
  TData = Awaited<ReturnType<typeof QueryGet>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof QueryGet>>, TError, TData>>;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getQueryGetQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof QueryGet>>> = ({ signal }) =>
    QueryGet({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof QueryGet>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type QueryGetQueryResult = NonNullable<Awaited<ReturnType<typeof QueryGet>>>;
export type QueryGetQueryError = AxiosError<unknown>;

export const useQueryGet = <
  TData = Awaited<ReturnType<typeof QueryGet>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof QueryGet>>, TError, TData>>;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getQueryGetQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const QueryGetUserMe = (options?: AxiosRequestConfig): Promise<AxiosResponse<void>> => {
  return axios.get(`/user/me`, options);
};

export const getQueryGetUserMeQueryKey = () => {
  return [`/user/me`] as const;
};

export const getQueryGetUserMeQueryOptions = <
  TData = Awaited<ReturnType<typeof QueryGetUserMe>>,
  TError = AxiosError<void>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof QueryGetUserMe>>, TError, TData>>;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getQueryGetUserMeQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof QueryGetUserMe>>> = ({ signal }) =>
    QueryGetUserMe({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof QueryGetUserMe>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type QueryGetUserMeQueryResult = NonNullable<Awaited<ReturnType<typeof QueryGetUserMe>>>;
export type QueryGetUserMeQueryError = AxiosError<void>;

export const useQueryGetUserMe = <
  TData = Awaited<ReturnType<typeof QueryGetUserMe>>,
  TError = AxiosError<void>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof QueryGetUserMe>>, TError, TData>>;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getQueryGetUserMeQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const MutationPatchUserProfile = (
  mutationPatchUserProfileBody: unknown,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.patch(`/user/profile`, mutationPatchUserProfileBody, options);
};

export const getMutationPatchUserProfileMutationOptions = <
  TError = AxiosError<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof MutationPatchUserProfile>>,
    TError,
    { data: unknown },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof MutationPatchUserProfile>>,
  TError,
  { data: unknown },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof MutationPatchUserProfile>>,
    { data: unknown }
  > = props => {
    const { data } = props ?? {};

    return MutationPatchUserProfile(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type MutationPatchUserProfileMutationResult = NonNullable<
  Awaited<ReturnType<typeof MutationPatchUserProfile>>
>;
export type MutationPatchUserProfileMutationBody = unknown;
export type MutationPatchUserProfileMutationError = AxiosError<void>;

export const useMutationPatchUserProfile = <
  TError = AxiosError<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof MutationPatchUserProfile>>,
    TError,
    { data: unknown },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof MutationPatchUserProfile>>,
  TError,
  { data: unknown },
  TContext
> => {
  const mutationOptions = getMutationPatchUserProfileMutationOptions(options);

  return useMutation(mutationOptions);
};

export const MutationPatchUserStudentInformation = (
  updateStudentInformationDto: UpdateStudentInformationDto,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.patch(`/user/student-information`, updateStudentInformationDto, options);
};

export const getMutationPatchUserStudentInformationMutationOptions = <
  TError = AxiosError<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof MutationPatchUserStudentInformation>>,
    TError,
    { data: UpdateStudentInformationDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof MutationPatchUserStudentInformation>>,
  TError,
  { data: UpdateStudentInformationDto },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof MutationPatchUserStudentInformation>>,
    { data: UpdateStudentInformationDto }
  > = props => {
    const { data } = props ?? {};

    return MutationPatchUserStudentInformation(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type MutationPatchUserStudentInformationMutationResult = NonNullable<
  Awaited<ReturnType<typeof MutationPatchUserStudentInformation>>
>;
export type MutationPatchUserStudentInformationMutationBody = UpdateStudentInformationDto;
export type MutationPatchUserStudentInformationMutationError = AxiosError<void>;

export const useMutationPatchUserStudentInformation = <
  TError = AxiosError<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof MutationPatchUserStudentInformation>>,
    TError,
    { data: UpdateStudentInformationDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof MutationPatchUserStudentInformation>>,
  TError,
  { data: UpdateStudentInformationDto },
  TContext
> => {
  const mutationOptions = getMutationPatchUserStudentInformationMutationOptions(options);

  return useMutation(mutationOptions);
};

export const MutationPostSchool = (
  mutationPostSchoolBody: unknown,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<School>> => {
  return axios.post(`/school`, mutationPostSchoolBody, options);
};

export const getMutationPostSchoolMutationOptions = <
  TError = AxiosError<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof MutationPostSchool>>,
    TError,
    { data: unknown },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof MutationPostSchool>>,
  TError,
  { data: unknown },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof MutationPostSchool>>,
    { data: unknown }
  > = props => {
    const { data } = props ?? {};

    return MutationPostSchool(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type MutationPostSchoolMutationResult = NonNullable<
  Awaited<ReturnType<typeof MutationPostSchool>>
>;
export type MutationPostSchoolMutationBody = unknown;
export type MutationPostSchoolMutationError = AxiosError<void>;

export const useMutationPostSchool = <TError = AxiosError<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof MutationPostSchool>>,
    TError,
    { data: unknown },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof MutationPostSchool>>,
  TError,
  { data: unknown },
  TContext
> => {
  const mutationOptions = getMutationPostSchoolMutationOptions(options);

  return useMutation(mutationOptions);
};

export const QueryGetSchool = (options?: AxiosRequestConfig): Promise<AxiosResponse<School[]>> => {
  return axios.get(`/school`, options);
};

export const getQueryGetSchoolQueryKey = () => {
  return [`/school`] as const;
};

export const getQueryGetSchoolQueryOptions = <
  TData = Awaited<ReturnType<typeof QueryGetSchool>>,
  TError = AxiosError<void>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof QueryGetSchool>>, TError, TData>>;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getQueryGetSchoolQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof QueryGetSchool>>> = ({ signal }) =>
    QueryGetSchool({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof QueryGetSchool>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type QueryGetSchoolQueryResult = NonNullable<Awaited<ReturnType<typeof QueryGetSchool>>>;
export type QueryGetSchoolQueryError = AxiosError<void>;

export const useQueryGetSchool = <
  TData = Awaited<ReturnType<typeof QueryGetSchool>>,
  TError = AxiosError<void>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof QueryGetSchool>>, TError, TData>>;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getQueryGetSchoolQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const QueryGetTestList = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<TestListDto>> => {
  return axios.get(`/test-list`, options);
};

export const getQueryGetTestListQueryKey = () => {
  return [`/test-list`] as const;
};

export const getQueryGetTestListQueryOptions = <
  TData = Awaited<ReturnType<typeof QueryGetTestList>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof QueryGetTestList>>, TError, TData>>;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getQueryGetTestListQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof QueryGetTestList>>> = ({ signal }) =>
    QueryGetTestList({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof QueryGetTestList>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type QueryGetTestListQueryResult = NonNullable<Awaited<ReturnType<typeof QueryGetTestList>>>;
export type QueryGetTestListQueryError = AxiosError<unknown>;

export const useQueryGetTestList = <
  TData = Awaited<ReturnType<typeof QueryGetTestList>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof QueryGetTestList>>, TError, TData>>;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getQueryGetTestListQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const QueryGetHollandTest = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<HollandTest[]>> => {
  return axios.get(`/holland-test`, options);
};

export const getQueryGetHollandTestQueryKey = () => {
  return [`/holland-test`] as const;
};

export const getQueryGetHollandTestQueryOptions = <
  TData = Awaited<ReturnType<typeof QueryGetHollandTest>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof QueryGetHollandTest>>, TError, TData>>;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getQueryGetHollandTestQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof QueryGetHollandTest>>> = ({ signal }) =>
    QueryGetHollandTest({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof QueryGetHollandTest>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type QueryGetHollandTestQueryResult = NonNullable<
  Awaited<ReturnType<typeof QueryGetHollandTest>>
>;
export type QueryGetHollandTestQueryError = AxiosError<unknown>;

export const useQueryGetHollandTest = <
  TData = Awaited<ReturnType<typeof QueryGetHollandTest>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof QueryGetHollandTest>>, TError, TData>>;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getQueryGetHollandTestQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const MutationDeleteHollandTest = (
  params: MutationDeleteHollandTestParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.delete(`/holland-test`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getMutationDeleteHollandTestMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof MutationDeleteHollandTest>>,
    TError,
    { params: MutationDeleteHollandTestParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof MutationDeleteHollandTest>>,
  TError,
  { params: MutationDeleteHollandTestParams },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof MutationDeleteHollandTest>>,
    { params: MutationDeleteHollandTestParams }
  > = props => {
    const { params } = props ?? {};

    return MutationDeleteHollandTest(params, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type MutationDeleteHollandTestMutationResult = NonNullable<
  Awaited<ReturnType<typeof MutationDeleteHollandTest>>
>;

export type MutationDeleteHollandTestMutationError = AxiosError<unknown>;

export const useMutationDeleteHollandTest = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof MutationDeleteHollandTest>>,
    TError,
    { params: MutationDeleteHollandTestParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof MutationDeleteHollandTest>>,
  TError,
  { params: MutationDeleteHollandTestParams },
  TContext
> => {
  const mutationOptions = getMutationDeleteHollandTestMutationOptions(options);

  return useMutation(mutationOptions);
};

export const MutationPostHollandTestQuestion = (
  createHollandQuestionDto: CreateHollandQuestionDto,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<HollandQuestion>> => {
  return axios.post(`/holland-test/question`, createHollandQuestionDto, options);
};

export const getMutationPostHollandTestQuestionMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof MutationPostHollandTestQuestion>>,
    TError,
    { data: CreateHollandQuestionDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof MutationPostHollandTestQuestion>>,
  TError,
  { data: CreateHollandQuestionDto },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof MutationPostHollandTestQuestion>>,
    { data: CreateHollandQuestionDto }
  > = props => {
    const { data } = props ?? {};

    return MutationPostHollandTestQuestion(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type MutationPostHollandTestQuestionMutationResult = NonNullable<
  Awaited<ReturnType<typeof MutationPostHollandTestQuestion>>
>;
export type MutationPostHollandTestQuestionMutationBody = CreateHollandQuestionDto;
export type MutationPostHollandTestQuestionMutationError = AxiosError<unknown>;

export const useMutationPostHollandTestQuestion = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof MutationPostHollandTestQuestion>>,
    TError,
    { data: CreateHollandQuestionDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof MutationPostHollandTestQuestion>>,
  TError,
  { data: CreateHollandQuestionDto },
  TContext
> => {
  const mutationOptions = getMutationPostHollandTestQuestionMutationOptions(options);

  return useMutation(mutationOptions);
};

export const MutationDeleteHollandTestQuestion = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.delete(`/holland-test/question`, options);
};

export const getMutationDeleteHollandTestQuestionMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof MutationDeleteHollandTestQuestion>>,
    TError,
    void,
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof MutationDeleteHollandTestQuestion>>,
  TError,
  void,
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof MutationDeleteHollandTestQuestion>>,
    void
  > = () => {
    return MutationDeleteHollandTestQuestion(axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type MutationDeleteHollandTestQuestionMutationResult = NonNullable<
  Awaited<ReturnType<typeof MutationDeleteHollandTestQuestion>>
>;

export type MutationDeleteHollandTestQuestionMutationError = AxiosError<unknown>;

export const useMutationDeleteHollandTestQuestion = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof MutationDeleteHollandTestQuestion>>,
    TError,
    void,
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof MutationDeleteHollandTestQuestion>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getMutationDeleteHollandTestQuestionMutationOptions(options);

  return useMutation(mutationOptions);
};

export const QueryGetHollandTestQuestionsAll = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<HollandQuestion[]>> => {
  return axios.get(`/holland-test/questions/all`, options);
};

export const getQueryGetHollandTestQuestionsAllQueryKey = () => {
  return [`/holland-test/questions/all`] as const;
};

export const getQueryGetHollandTestQuestionsAllQueryOptions = <
  TData = Awaited<ReturnType<typeof QueryGetHollandTestQuestionsAll>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof QueryGetHollandTestQuestionsAll>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getQueryGetHollandTestQuestionsAllQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof QueryGetHollandTestQuestionsAll>>> = ({
    signal,
  }) => QueryGetHollandTestQuestionsAll({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof QueryGetHollandTestQuestionsAll>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type QueryGetHollandTestQuestionsAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof QueryGetHollandTestQuestionsAll>>
>;
export type QueryGetHollandTestQuestionsAllQueryError = AxiosError<unknown>;

export const useQueryGetHollandTestQuestionsAll = <
  TData = Awaited<ReturnType<typeof QueryGetHollandTestQuestionsAll>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof QueryGetHollandTestQuestionsAll>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getQueryGetHollandTestQuestionsAllQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const QueryGetHollandTestScore = (
  params: QueryGetHollandTestScoreParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<HollandTestScoreResponseDto>> => {
  return axios.get(`/holland-test/score`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getQueryGetHollandTestScoreQueryKey = (params: QueryGetHollandTestScoreParams) => {
  return [`/holland-test/score`, ...(params ? [params] : [])] as const;
};

export const getQueryGetHollandTestScoreQueryOptions = <
  TData = Awaited<ReturnType<typeof QueryGetHollandTestScore>>,
  TError = AxiosError<unknown>,
>(
  params: QueryGetHollandTestScoreParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof QueryGetHollandTestScore>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getQueryGetHollandTestScoreQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof QueryGetHollandTestScore>>> = ({
    signal,
  }) => QueryGetHollandTestScore(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof QueryGetHollandTestScore>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type QueryGetHollandTestScoreQueryResult = NonNullable<
  Awaited<ReturnType<typeof QueryGetHollandTestScore>>
>;
export type QueryGetHollandTestScoreQueryError = AxiosError<unknown>;

export const useQueryGetHollandTestScore = <
  TData = Awaited<ReturnType<typeof QueryGetHollandTestScore>>,
  TError = AxiosError<unknown>,
>(
  params: QueryGetHollandTestScoreParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof QueryGetHollandTestScore>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getQueryGetHollandTestScoreQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const QueryGetHollandTestMyScore = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<HollandTestScoreResponseDto>> => {
  return axios.get(`/holland-test/my-score`, options);
};

export const getQueryGetHollandTestMyScoreQueryKey = () => {
  return [`/holland-test/my-score`] as const;
};

export const getQueryGetHollandTestMyScoreQueryOptions = <
  TData = Awaited<ReturnType<typeof QueryGetHollandTestMyScore>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof QueryGetHollandTestMyScore>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getQueryGetHollandTestMyScoreQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof QueryGetHollandTestMyScore>>> = ({
    signal,
  }) => QueryGetHollandTestMyScore({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof QueryGetHollandTestMyScore>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type QueryGetHollandTestMyScoreQueryResult = NonNullable<
  Awaited<ReturnType<typeof QueryGetHollandTestMyScore>>
>;
export type QueryGetHollandTestMyScoreQueryError = AxiosError<unknown>;

export const useQueryGetHollandTestMyScore = <
  TData = Awaited<ReturnType<typeof QueryGetHollandTestMyScore>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof QueryGetHollandTestMyScore>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getQueryGetHollandTestMyScoreQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const MutationPostHollandTestStart = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<HollandTestStartResponseDto>> => {
  return axios.post(`/holland-test/start`, undefined, options);
};

export const getMutationPostHollandTestStartMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof MutationPostHollandTestStart>>,
    TError,
    void,
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof MutationPostHollandTestStart>>,
  TError,
  void,
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof MutationPostHollandTestStart>>,
    void
  > = () => {
    return MutationPostHollandTestStart(axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type MutationPostHollandTestStartMutationResult = NonNullable<
  Awaited<ReturnType<typeof MutationPostHollandTestStart>>
>;

export type MutationPostHollandTestStartMutationError = AxiosError<unknown>;

export const useMutationPostHollandTestStart = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof MutationPostHollandTestStart>>,
    TError,
    void,
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof MutationPostHollandTestStart>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getMutationPostHollandTestStartMutationOptions(options);

  return useMutation(mutationOptions);
};

export const MutationPostHollandTestFinish = (
  hollandTestFinishDto: HollandTestFinishDto,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.post(`/holland-test/finish`, hollandTestFinishDto, options);
};

export const getMutationPostHollandTestFinishMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof MutationPostHollandTestFinish>>,
    TError,
    { data: HollandTestFinishDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof MutationPostHollandTestFinish>>,
  TError,
  { data: HollandTestFinishDto },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof MutationPostHollandTestFinish>>,
    { data: HollandTestFinishDto }
  > = props => {
    const { data } = props ?? {};

    return MutationPostHollandTestFinish(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type MutationPostHollandTestFinishMutationResult = NonNullable<
  Awaited<ReturnType<typeof MutationPostHollandTestFinish>>
>;
export type MutationPostHollandTestFinishMutationBody = HollandTestFinishDto;
export type MutationPostHollandTestFinishMutationError = AxiosError<unknown>;

export const useMutationPostHollandTestFinish = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof MutationPostHollandTestFinish>>,
    TError,
    { data: HollandTestFinishDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof MutationPostHollandTestFinish>>,
  TError,
  { data: HollandTestFinishDto },
  TContext
> => {
  const mutationOptions = getMutationPostHollandTestFinishMutationOptions(options);

  return useMutation(mutationOptions);
};

export const MutationPostKpiCompassTestFinish = (
  kpiCompassFinishDto: KpiCompassFinishDto,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.post(`/kpi-compass-test/finish`, kpiCompassFinishDto, options);
};

export const getMutationPostKpiCompassTestFinishMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof MutationPostKpiCompassTestFinish>>,
    TError,
    { data: KpiCompassFinishDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof MutationPostKpiCompassTestFinish>>,
  TError,
  { data: KpiCompassFinishDto },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof MutationPostKpiCompassTestFinish>>,
    { data: KpiCompassFinishDto }
  > = props => {
    const { data } = props ?? {};

    return MutationPostKpiCompassTestFinish(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type MutationPostKpiCompassTestFinishMutationResult = NonNullable<
  Awaited<ReturnType<typeof MutationPostKpiCompassTestFinish>>
>;
export type MutationPostKpiCompassTestFinishMutationBody = KpiCompassFinishDto;
export type MutationPostKpiCompassTestFinishMutationError = AxiosError<unknown>;

export const useMutationPostKpiCompassTestFinish = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof MutationPostKpiCompassTestFinish>>,
    TError,
    { data: KpiCompassFinishDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof MutationPostKpiCompassTestFinish>>,
  TError,
  { data: KpiCompassFinishDto },
  TContext
> => {
  const mutationOptions = getMutationPostKpiCompassTestFinishMutationOptions(options);

  return useMutation(mutationOptions);
};

export const MutationPostKpiAcademyTestFinish = (
  kpiAcademyFinishDto: KpiAcademyFinishDto,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.post(`/kpi-academy-test/finish`, kpiAcademyFinishDto, options);
};

export const getMutationPostKpiAcademyTestFinishMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof MutationPostKpiAcademyTestFinish>>,
    TError,
    { data: KpiAcademyFinishDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof MutationPostKpiAcademyTestFinish>>,
  TError,
  { data: KpiAcademyFinishDto },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof MutationPostKpiAcademyTestFinish>>,
    { data: KpiAcademyFinishDto }
  > = props => {
    const { data } = props ?? {};

    return MutationPostKpiAcademyTestFinish(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type MutationPostKpiAcademyTestFinishMutationResult = NonNullable<
  Awaited<ReturnType<typeof MutationPostKpiAcademyTestFinish>>
>;
export type MutationPostKpiAcademyTestFinishMutationBody = KpiAcademyFinishDto;
export type MutationPostKpiAcademyTestFinishMutationError = AxiosError<unknown>;

export const useMutationPostKpiAcademyTestFinish = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof MutationPostKpiAcademyTestFinish>>,
    TError,
    { data: KpiAcademyFinishDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof MutationPostKpiAcademyTestFinish>>,
  TError,
  { data: KpiAcademyFinishDto },
  TContext
> => {
  const mutationOptions = getMutationPostKpiAcademyTestFinishMutationOptions(options);

  return useMutation(mutationOptions);
};

export const QueryGetSubjectAll = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<Subject[]>> => {
  return axios.get(`/subject/all`, options);
};

export const getQueryGetSubjectAllQueryKey = () => {
  return [`/subject/all`] as const;
};

export const getQueryGetSubjectAllQueryOptions = <
  TData = Awaited<ReturnType<typeof QueryGetSubjectAll>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof QueryGetSubjectAll>>, TError, TData>>;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getQueryGetSubjectAllQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof QueryGetSubjectAll>>> = ({ signal }) =>
    QueryGetSubjectAll({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof QueryGetSubjectAll>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type QueryGetSubjectAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof QueryGetSubjectAll>>
>;
export type QueryGetSubjectAllQueryError = AxiosError<unknown>;

export const useQueryGetSubjectAll = <
  TData = Awaited<ReturnType<typeof QueryGetSubjectAll>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof QueryGetSubjectAll>>, TError, TData>>;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getQueryGetSubjectAllQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const QueryGetAcademyModuleWithAcademyModuleId = (
  academyModuleId: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<AcademyModule>> => {
  return axios.get(`/academy-module/${academyModuleId}`, options);
};

export const getQueryGetAcademyModuleWithAcademyModuleIdQueryKey = (academyModuleId: string) => {
  return [`/academy-module/${academyModuleId}`] as const;
};

export const getQueryGetAcademyModuleWithAcademyModuleIdQueryOptions = <
  TData = Awaited<ReturnType<typeof QueryGetAcademyModuleWithAcademyModuleId>>,
  TError = AxiosError<unknown>,
>(
  academyModuleId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof QueryGetAcademyModuleWithAcademyModuleId>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getQueryGetAcademyModuleWithAcademyModuleIdQueryKey(academyModuleId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof QueryGetAcademyModuleWithAcademyModuleId>>
  > = ({ signal }) =>
    QueryGetAcademyModuleWithAcademyModuleId(academyModuleId, { signal, ...axiosOptions });

  return { queryKey, queryFn, enabled: !!academyModuleId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof QueryGetAcademyModuleWithAcademyModuleId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type QueryGetAcademyModuleWithAcademyModuleIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof QueryGetAcademyModuleWithAcademyModuleId>>
>;
export type QueryGetAcademyModuleWithAcademyModuleIdQueryError = AxiosError<unknown>;

export const useQueryGetAcademyModuleWithAcademyModuleId = <
  TData = Awaited<ReturnType<typeof QueryGetAcademyModuleWithAcademyModuleId>>,
  TError = AxiosError<unknown>,
>(
  academyModuleId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof QueryGetAcademyModuleWithAcademyModuleId>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getQueryGetAcademyModuleWithAcademyModuleIdQueryOptions(
    academyModuleId,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const MutationPostAcademyModuleList = (
  academyModulesFilterRequestDTO: AcademyModulesFilterRequestDTO,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<AcademyModulesResultDTO>> => {
  return axios.post(`/academy-module/list`, academyModulesFilterRequestDTO, options);
};

export const getMutationPostAcademyModuleListMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof MutationPostAcademyModuleList>>,
    TError,
    { data: AcademyModulesFilterRequestDTO },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof MutationPostAcademyModuleList>>,
  TError,
  { data: AcademyModulesFilterRequestDTO },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof MutationPostAcademyModuleList>>,
    { data: AcademyModulesFilterRequestDTO }
  > = props => {
    const { data } = props ?? {};

    return MutationPostAcademyModuleList(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type MutationPostAcademyModuleListMutationResult = NonNullable<
  Awaited<ReturnType<typeof MutationPostAcademyModuleList>>
>;
export type MutationPostAcademyModuleListMutationBody = AcademyModulesFilterRequestDTO;
export type MutationPostAcademyModuleListMutationError = AxiosError<unknown>;

export const useMutationPostAcademyModuleList = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof MutationPostAcademyModuleList>>,
    TError,
    { data: AcademyModulesFilterRequestDTO },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof MutationPostAcademyModuleList>>,
  TError,
  { data: AcademyModulesFilterRequestDTO },
  TContext
> => {
  const mutationOptions = getMutationPostAcademyModuleListMutationOptions(options);

  return useMutation(mutationOptions);
};

export const MutationPostAcademyModuleLocations = (
  filterRequestDTO: FilterRequestDTO,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<AcademyModulesResultDTO>> => {
  return axios.post(`/academy-module/locations`, filterRequestDTO, options);
};

export const getMutationPostAcademyModuleLocationsMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof MutationPostAcademyModuleLocations>>,
    TError,
    { data: FilterRequestDTO },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof MutationPostAcademyModuleLocations>>,
  TError,
  { data: FilterRequestDTO },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof MutationPostAcademyModuleLocations>>,
    { data: FilterRequestDTO }
  > = props => {
    const { data } = props ?? {};

    return MutationPostAcademyModuleLocations(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type MutationPostAcademyModuleLocationsMutationResult = NonNullable<
  Awaited<ReturnType<typeof MutationPostAcademyModuleLocations>>
>;
export type MutationPostAcademyModuleLocationsMutationBody = FilterRequestDTO;
export type MutationPostAcademyModuleLocationsMutationError = AxiosError<unknown>;

export const useMutationPostAcademyModuleLocations = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof MutationPostAcademyModuleLocations>>,
    TError,
    { data: FilterRequestDTO },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof MutationPostAcademyModuleLocations>>,
  TError,
  { data: FilterRequestDTO },
  TContext
> => {
  const mutationOptions = getMutationPostAcademyModuleLocationsMutationOptions(options);

  return useMutation(mutationOptions);
};

export const MutationPostMarkCompass = (
  mutationPostMarkCompassBody: string[],
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<Mark[]>> => {
  return axios.post(`/mark/compass`, mutationPostMarkCompassBody, options);
};

export const getMutationPostMarkCompassMutationOptions = <
  TError = AxiosError<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof MutationPostMarkCompass>>,
    TError,
    { data: string[] },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof MutationPostMarkCompass>>,
  TError,
  { data: string[] },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof MutationPostMarkCompass>>,
    { data: string[] }
  > = props => {
    const { data } = props ?? {};

    return MutationPostMarkCompass(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type MutationPostMarkCompassMutationResult = NonNullable<
  Awaited<ReturnType<typeof MutationPostMarkCompass>>
>;
export type MutationPostMarkCompassMutationBody = string[];
export type MutationPostMarkCompassMutationError = AxiosError<void>;

export const useMutationPostMarkCompass = <
  TError = AxiosError<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof MutationPostMarkCompass>>,
    TError,
    { data: string[] },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof MutationPostMarkCompass>>,
  TError,
  { data: string[] },
  TContext
> => {
  const mutationOptions = getMutationPostMarkCompassMutationOptions(options);

  return useMutation(mutationOptions);
};

export const QueryGetMarkCompass = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<Mark[]>> => {
  return axios.get(`/mark/compass`, options);
};

export const getQueryGetMarkCompassQueryKey = () => {
  return [`/mark/compass`] as const;
};

export const getQueryGetMarkCompassQueryOptions = <
  TData = Awaited<ReturnType<typeof QueryGetMarkCompass>>,
  TError = AxiosError<void>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof QueryGetMarkCompass>>, TError, TData>>;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getQueryGetMarkCompassQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof QueryGetMarkCompass>>> = ({ signal }) =>
    QueryGetMarkCompass({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof QueryGetMarkCompass>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type QueryGetMarkCompassQueryResult = NonNullable<
  Awaited<ReturnType<typeof QueryGetMarkCompass>>
>;
export type QueryGetMarkCompassQueryError = AxiosError<void>;

export const useQueryGetMarkCompass = <
  TData = Awaited<ReturnType<typeof QueryGetMarkCompass>>,
  TError = AxiosError<void>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof QueryGetMarkCompass>>, TError, TData>>;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getQueryGetMarkCompassQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const MutationDeleteMarkCompassWithUserId = (
  userId: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<boolean>> => {
  return axios.delete(`/mark/compass/${userId}`, options);
};

export const getMutationDeleteMarkCompassWithUserIdMutationOptions = <
  TError = AxiosError<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof MutationDeleteMarkCompassWithUserId>>,
    TError,
    { userId: string },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof MutationDeleteMarkCompassWithUserId>>,
  TError,
  { userId: string },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof MutationDeleteMarkCompassWithUserId>>,
    { userId: string }
  > = props => {
    const { userId } = props ?? {};

    return MutationDeleteMarkCompassWithUserId(userId, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type MutationDeleteMarkCompassWithUserIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof MutationDeleteMarkCompassWithUserId>>
>;

export type MutationDeleteMarkCompassWithUserIdMutationError = AxiosError<void>;

export const useMutationDeleteMarkCompassWithUserId = <
  TError = AxiosError<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof MutationDeleteMarkCompassWithUserId>>,
    TError,
    { userId: string },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof MutationDeleteMarkCompassWithUserId>>,
  TError,
  { userId: string },
  TContext
> => {
  const mutationOptions = getMutationDeleteMarkCompassWithUserIdMutationOptions(options);

  return useMutation(mutationOptions);
};
